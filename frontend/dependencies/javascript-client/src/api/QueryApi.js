/**
 * DBqueryBench
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/Query'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Query'));
  } else {
    // Browser globals (root is window)
    if (!root.DBqueryBench) {
      root.DBqueryBench = {};
    }
    root.DBqueryBench.QueryApi = factory(root.DBqueryBench.ApiClient, root.DBqueryBench.Query);
  }
}(this, function (ApiClient, Query) {
  'use strict';

  /**
   * Query service.
   * @module api/QueryApi
   * @version 1.0.0
   */

  /**
   * Constructs a new QueryApi. 
   * @alias module:api/QueryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function (apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addQuery operation.
     * @callback module:api/QueryApi~addQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new query to the queue
     * 
     * @param {module:model/Query} body Query that needs to be queued
     * @param {module:api/QueryApi~addQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addQuery = function (body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addQuery");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/query', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the approveQuery operation.
     * @callback module:api/QueryApi~approveQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve a query in the queue
     * 
     * @param {Number} queryId ID of query that needs to be updated
     * @param {String} status Updated status of the query
     * @param {module:api/QueryApi~approveQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.approveQuery = function (queryId, status, callback) {
      var postBody = status;

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling approveQuery");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling approveQuery");
      }


      var pathParams = {
        'queryId': queryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/query/{queryId}/approve', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApprovalQuery operation.
     * @callback module:api/QueryApi~deleteApprovalQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an approval of a query
     * 
     * @param {Number} queryId Query id to delete
     * @param {module:api/QueryApi~deleteApprovalQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApprovalQuery = function (queryId, callback) {
      var postBody = null;

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling deleteApprovalQuery");
      }


      var pathParams = {
        'queryId': queryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/query/{queryId}/approve', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuery operation.
     * @callback module:api/QueryApi~deleteQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a query
     * 
     * @param {Number} queryId Query id to delete
     * @param {module:api/QueryApi~deleteQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteQuery = function (queryId, callback) {
      var postBody = null;

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling deleteQuery");
      }


      var pathParams = {
        'queryId': queryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/query/{queryId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findQueryByOwner operation.
     * @callback module:api/QueryApi~findQueryByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Query>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds Query by Owner
     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param {Array.<String>} owner Owner to filter by
     * @param {module:api/QueryApi~findQueryByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Query>}
     */
    this.findQueryByOwner = function (owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling findQueryByOwner");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'owner': {
          value: owner,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Query];

      return this.apiClient.callApi(
        '/query/findByOwner', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findQueryByStatus operation.
     * @callback module:api/QueryApi~findQueryByStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Query>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds Query by status
     * Multiple status values can be provided with comma separated strings
     * @param {Array.<module:model/String>} status Status values that need to be considered for filter
     * @param {module:api/QueryApi~findQueryByStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Query>}
     */
    this.findQueryByStatus = function (status, callback) {
      var postBody = null;

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling findQueryByStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'status': {
          value: status,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Query];

      return this.apiClient.callApi(
        '/query/findByStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueries operation.
     * @callback module:api/QueryApi~getQueriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Query>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Query waiting for approval
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.owner Owner to filter by
     * @param {Array.<module:model/String>} opts.status Status values that need to be considered for filter
     * @param {module:api/QueryApi~getQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Query>}
     */
    this.getQueries = function (opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'owner': {
          value: opts['owner'],
          collectionFormat: 'multi'
        },
        'status': {
          value: opts['status'],
          collectionFormat: 'multi'
        },
        'servername': {
          value: opts['servername'],
          collectionFormat: 'multi'
        },
        'ticketid': {
          value: opts['ticketid'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Query];

      return this.apiClient.callApi(
        '/query', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryById operation.
     * @callback module:api/QueryApi~getQueryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Query} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find query by ID
     * Returns a single query
     * @param {Number} queryId ID of query to return
     * @param {module:api/QueryApi~getQueryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Query}
     */
    this.getQueryById = function (queryId, callback) {
      var postBody = null;

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling getQueryById");
      }


      var pathParams = {
        'queryId': queryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Query;

      return this.apiClient.callApi(
        '/query/{queryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuery operation.
     * @callback module:api/QueryApi~updateQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing query
     * 
     * @param {module:model/Query} body Query that needs to be updated
     * @param {module:api/QueryApi~updateQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateQuery = function (body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateQuery");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/query', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
